Java - programming language and a platform.
java is a high level language with the following characterist:
       It is simple
       object oriented
       distributed
       interpreted
       Robust
       Secure
       Architecture-neutral
       portable
       high performance
       multithreaded
       Dynamic
       
-Java program is both compiled and interpreted.
-With compiling, you transilate the java program into intermediate language called bytecodes.
-the bytecode is interpreted by the java interpretor.
N/b compilation occurs once while interpretation occur each time the program is executed.
-We can also say java bytecodes is a machine code instruction for java virtual machine.
-java program can be compiled into bytecode on any platform that has java compiler.
-Java platform has two components, and this are :
     -JM(The java virtual machine)
     -Java API (the java application programming interface.
-Java API is a large collection for ready-made software components that provides useful capabilities such as:
       Graphical user interface(GUI) widgets
-Java API is grouped into  libraries(packages) of related components.
-Java is platform independent
-It is slow than the native code.
-Java applet is a java program that adheres to certain convention that allow it to run within a java enabled browser.
-server serves and supports clients on a network. Examples are:
      Web server
      proxy server.
      mail server.
      printer server.
      boot server.
      
-servlets are similar to applet in that they  are runtime extensions of applications .
-they run within the java server, configuring or tailoring the server.
-The core API is the API included in every full implementation  of the java platform.
-It gives the following features:
                 The essentials:objects, strings, threads, numbers, inputs, and outputs, data structures, system properties, data and time.
                 Applets: the sets of conventions used by java applets.
                 networking is the tcp and UDP sockets and IP addresses.
                 internationalizations, helps in localising for users worldwide.
                 security - both low level and high level including the electronic signature.
                 Software components - known as javabeans, can plug into existing components architecture such as microsoft ole/com
                 object serialization - allows lightweight persistence and communication via Remote method invocation(RMI)
                 java Database connectivity(JDBC) - provides uniform access to a wide range of relational databases.
-JVM and Java API insulates the java program from hardware dependancies.
-Why java  - Quick to start 
           - Less  code
           -better codes - ie encourages garbage collections that help avoid memory leaks.
           -program faster.
           
-Practical exercise:
       -Java file should have exact name as the class name.
       -compiling the the java source file, you exacute;
                javac filename.java
       -After successful compilation, a file name filename.class is create in the same directory. This class file contains the java bytecode-platform-independt codes
       interpreted by the java interpreter.
       -To run the application type:
            java filename.java
       -Your output will be displayed in the window where you invoked the interpreter.
       -Java methods(function-block of code) and variables should exist within a class.
       -The entry point of java application is the main method.
       -When you run application with class name, the interpreter invoke the main method in that class.
       -The main method control the flow of the program.
       -components of the java application are: objects, class, methods and java statements.
       
       
       Comments in java
       --------------------
       -/* text */ 
       -/** documentation */
       -//text
       
       Defining a class
       ---------------------
       -Is the besic building block of an object-oriented language.
       -It the blueprint  that describe the state and behavior associated with instances of that class.
       -Instanciating a class means that you create an object that has the same state and behaviors as other instances of he same  class.
       -state associated with  a class or object is stored in member variables.
       -The behavior  associated with a class or object is implemented with method.
       -Every java application must contain the main method:
               public static void main(String[] args){
                  //body of main method
                 }
      -The main method starts with three modifers
           -public - allows any class to call the main method
           -static - means that the main method is a class method
           -void - indicate that the main method does not return any value.
      -On invoking the java interpreter,you start by calling the class  main method, that will call other methods that will be required to run the application.
      -
      
      Arguments to the main method
      -------------------------------
      -While declaring the main method, you can pass arguments: an array of string for example:
            public static void main(String[] args)
      -This array is the mechanism through which the java VM passes information to your application.
      -Each string in the array is called a command-line argument.
        
        
       Using Classes and Objects
       --------------------------------
       -System class provides system independent access to system dependent functionality.
       -One feature provided by the system class is the standard output stream- a place to send text that usually  refers to the terminal  window in which you invoke 
       the java interpreter.
       -Standard output stream is used during the development cycle.
       
       Using a class variable
       ----------------------------
       Exampl
       System.out.println("AM learning java")
       -The construct System.out is the full name of the out variable in the system class.
       -The application never instantiates the system class. Instead, it refers to out directly through the class.
       -This is because out  is a class variable -a variable  associated with a class rather than with an object.
       -The java allocates a class variable once per class , no matter how many instances of that class exist.
       -Class method implement class-specific bahavior.
       
       
       Applet
       ------
       -It facilitates the java program to be included in HTML pages and executed in java enabled browser.
       -To compile and run applet, you can use tools from the JDK
       -JDK compiler allows you to compile any kind of java program.
       -JDK applet viewer lets you run java applet.
       
       Creating java source file
       --------------------------
       -Create a file called LetUsAllLearnJava.java
         import java.applet.Applet;
         import java.awt.Graphics;
         public class LetUsAllLearnJava extends Applet{
           public void pain(Graphics g){
           g.drawString("Dudes learn java" 30, 20);
           }
          }
      
           
           Creating an HTML File that includes the Applet
           ----------------------------------------------------
    -Create a filename.html in the same director of yourfilename.class.
    -HTML file should contains:
        <html>
        <head>
        <title>title name</title>
        </head>
        <body>
        <APPLET CODE="yourfilename.class" WIDTH=140px HEIGHT=20>
        </APPLET>
        </body>
        </html>
            
-Java applet is a program that adheres to a set of conventiond that allow it 
to run within a java-enabled browser.
-procedure to write a applet program.
  1) you import classes or packages.
  import java.applet.Applet;
  import java.awt.Graphics;
-A class can easily refer to classes in other packages.
-Packages are used to group classes.
-similar to the way libraries group c functions.
-Every applet must define a subclass of the applet class.
-Applet inherit a great deal of functionality from the applet class, ranging  from the  ability
 to communicate with the bowser to the ability to present a 
Graphical user Interface(GUI).
-Applet implements just one method: paint: every applet must implement at least one of the following methods:
 init, start, or paint.
-Unlike the java application, java applet do not need to implement a main method.
-Applet are designed to be included  in HTML page.
-Using the <APPLET> HTML tag, you specify(at a minimum) the location of the applet subclass and the dimension of the applet's on screen display area.
-When a java-enabled browser  encounters an <applet> tag, it reserver on screen space for the applet,
 loads the applet subclass onto the computer on which  it is executing and creates an instance of the applet subclass

Importing classes and packages
----------------------------------
-The java.applet. and java.awt prefixes tell the compiler which packages it should search for the applet and Graphic class.
-the Java.applet packages contains classes that are essential to java applet.
-The java.awt package contains classes used by all java program with a GUI.
-To import  entire package: 
           import java.applet.*;
           import java.awt.*;
-In the java language, every class is in a package.
-If the source code for a class doesn't have a package statement at the 
 top declaring in which package the class is, then the class is in the default package.
 -Without a package, all classes can refer to each other without prefixes ie
  java.awt component  class refers to the java.awt graphics class without  any prefixes  and without importing the graphics class.
  
  
  Defining an applet subclass
  ---------------------------------
  import java.applet.APPLET;
  import java.awt.Graphics;
  public class Amlearning extend Applet{
   public void paint(Graphics g){
     g.drawString("Learning java is cool!" , 100, 40);
     }
  }
 -The extends keyword indicates that Amlearning is a subclass of the class whose name follows: Applet.
 -From Applet class, applet inherit a great deals of functionality. Perhaps most important is the ability to respond to browser request.
 
 
 Implementing Applet Methods
 ---------------------------------
 -Every applet implements one or more of the init, start, and paint methods.
 -the graphics object passesed into the paint method represents the  applet's  on-screen drawing on-screen
 -the applet draws the string "learning java is cool" starting at location (100, 40)
 -<APPLET CODE = "SimpleInterest.class" WIDTH= 120 HEIGHT=30>
 -The applet tag species that the browser should load the class whose compiled code(bytecode) is in the file named SimpleInterest.class.
 -If you include an applet twice in one HTML page, the browser loads the class file once and creates two instance of the class.
 -the width and height attributes are like the attributes of the same name in an <IMG> tag:
 -They specifies the size in pixels of the applet's display area.
 
 Object oriented programming concepts
 ---------------------------------------
 -real world object share two characteristics: they have state and behavior.
 -For example dog  have state(name, color, breed, condition of being angry) and have behavior(barking, fetching , slobbering)
 -A software objects mains its state in variables and implements its behavior with methods.
 -An object is a software bundled of variables and related methods.
 -Everything that the software object knows (its state) and can do (its behavior) is expressed by the variable and method within that object.
 -object interact with another object through the public interface.
 -object can change its private information without affecting another objects as 
   long as the syntax and semantics  of the object's public interface remains the same.
 -Java objects can specify exact which other object have access based on inheritance and ,package relationship.
 -hiding information within an object's nucleus and then providing  a  public interface for interaction with it is called encapsulations.
 
 
 Benefits of objects
 -------------------
 -encapsulating related variables and methods into  a neat software bundle is a simple yet powerful idea that provides  two major 
 benefits to software developer.
 -Modularity - the source code for an object can be written and maintained independently from the source code for other objects.
 -An object can be easily passed around in the system.
 -information hiding -  an object has a public interface that other objects can use to communicate with it.
  However, the object can maintain private information and methods that can be changed at any time  without affecting the other objects that depend on it.
  
  
  
  What is message
  ----------------------
-A single object alone is generally not very useful and usually appear as a commponent of a large  program or application contains many other objects.
-Through the interaction of this objects , programmers achieve  higher-order functionality and more complex behavior.
-software objects interact and communicate with each other by sending messages to each other.
-information is passed  along with the message  as a parameter to a method.
-Three components that comprise a message.
  1)The object to whom the message is addressed(bicycle)
  2)the name of the method to perform (Change Gears)
  3)Any parameter needed(lowegear)
  
  Benefit of messages
  ---------------------
-An object behavior is expressed through its methods, so aside from direct variable access, message passing support all
possible interactions between objects.
-Objects dont need to be in the same process or even on the same machine to send and receive messages back and forth to each other.




What is a class
---------------------
-Using the object-oriented terminology, we say that your bicycle is an instance of the class of objects known as bicycles.
-Bicycle have in common some state(eg the current gear, cureen cadence and two wheels) and behavior( they change gears and brakes)
-In object-oriented some objects of the same kind sharing the same characteristics.
-Examples are the:
                rectangle;
                employee records
                video clips
-You can take advantage of the fact that objects of the same kind are similar,  and you can create a blueprint for those objects.
-Software blueprints for objects are called classes.
-A class is a blueprint or prototype that defines the variable and methods common to all objects of a certain kind.
-A classs can define not only the instance variable and instantance methods, but also the class variable and class method.
-You can  access class variable and methods from an instance of the class or direct from a class.
-You dont have to instanciate  a class variable and methods.
-A class mehod can operate only on class variable. They cannot access instance variable or instance methods.
-The system creates a single copy of all class variable for a class the first time it encounters the class in a program.
-All instance of that class share its class variable.



Objects versus Classes
---------------------------
-Software objects are abstract concept.
-objects have values while classes does not.

Benefits of classes
----------------------
-objects provides the benefit of modularity and information hiding.
-Classes provide the benefits  of reusability.
-Software programmers use the same class, and thus the same code, over and over again to create many objects.


What is inheritance
--------------------------
-objects are defined in terms of  classes.
-In object-oriented terminology, mountain bikes, racing bikes and tendems are all the subclasses of the bicycle class, while the bicycle class is the superclass 
 of mountain bikes, racing bike, tandem.
 -Each subclass inherits state(in the form of variable declarations) from the superclass.
 -mountain bike tendem and racing bike share the  same state.
 -They also inherit the method from the superclass.
 -Subclass are not limited to the state and behavior provided to them  by their superclass. They can add other variables and methods.
 -subclasses can also override inherited methods and provide specialized implementations for those methods.
 -One is not limited  to just one layer inheritance. The inheritance tree or class hierarchy, can be as deep  as needed.
 -Methods and variables are inherited down through the levels.
 -In general, the further down in the hierarchy a class appears, the more specialized its behavior.
 
 Benefits of inheritance
 ------------------------------
 -Subclass provide specialized behavior from  the basis of  common elements provided by the superclass.
 -Using inheritance, programmer can reuse the codes in the superclass many times.
 -programmer can implement superclass called abstract class.
 -the abstact class defines generic behavior.
 -The abstract superclass defines and may partially implement the behavior but much of the class is underfined and unimplemented.
 -Other programmers fill in the details with specialized subclasses.
 
 
 Nuts and bolts of the java language
 -------------------------------------
 import java.io.*;
 public class Count{
  public static void countChars(Reader in) throws IOException
   {
   int count = 0;
   while(in.read() != -1)
      count ++;
   System.out.print("counted" + count + "characters");
   }
  //main method
  public  static void main(String[] args) throw Exception
  {
  if (args.length >=1 )
    countChars(new FileReader(args[0]));
  else
     System.out.println("usage: count filename");
    }
 }
-Above lines of code describe the traditional java language features, ie variables, data type, operators, expressions, control flow statements.


Variables and data types
------------------------------
-Variables are entities (values and data) that act or are acted upon.
-the countChars methods defines two variables count and in.
-the program increments count each time it reads a character from the other variable in.
-Variable declaration always contains two components: the type  of the variable and its name.
-Where the declaration appears in relation to other code element, determine its scope.


Data types
------------
-All variable in java must have data type.
-Data type determines the values that the variable can contain and operation that can be performed on it.
-Declaring int count declares that count is an integer(int). Interger can only contains only whole number values(both positive and negative) and one can use
standard arithment operations such as +, - , / on interger to perform the standard arithmentic operation(addition, subtraction, multiplication, and division).
-The are two categories of data types in the java language
            primitive
            reference
            
            
primitive data types
---------------------------
-integers 
       -byte
       -short
       -int
       -long
-Real numbers
        -float
        double
-char
-boolean

-A variable of primitive type contains a single values of the  appropriate size and format for its type:
                characters
                numbers
                boolean
                
                
                
                
Reference types
-------------------
-They include:
         Arrays.
         classes.
         interfaces.
-A reference to the actual value or set of values represented by the variable.
-They are like your friends  address. The address is not you friend but the way to reach your friend.
-A reference type variable is not the array or objects itself but rather a way to reach  it.
-The countChars method uses one variable of reference type in, which is a reader object.
-When used in a statement or expression, the name in evaluates to a reference to the object.
-So you can use the object's name to  access its member variables or call its methods.(just as countChars does to call read).


-N/B - data type supported by c and C++ that are not supported by the java language
         pointers
         structures
         unions
     -in java  you use classes and interfaces instead.
-Objects and arrays are reference  data types. Variable of this type  evaluate to a reference.
-Reference is similar to pointers used in other languages such as and C++.
-Java does not have explicit type, you cannot construct a reference to anonymous memory.
-This makes programming easier, well as prevents common error due to pointer mismanagement.
-java language does not support either structure nor union.
-instead it uses classes or interfaces.
-Classes and interfaces allow you to bundle together  data and method and to control who has access to those classes members.
-this makes them much powerful that structured and union.


Variable name
--------------------
-A program refer to a variable value by its name.
-CountChars method wants to refer to the value of the count variable, it simply use the name count.
-the following must hold  true for java variable.
     -It must be a legal java identier comprised of a series of unicode characters.
      unicode is a character-coding system designed to support text written in diverse human languages.
      -It must not be a keyword or boolean literal.
      -It must not have the same name as another variable whose declaration appear in the same scope.
-By convention variable names begin with a lowercase letter and class names begin  with an uppercase letter.
-If vaiable name consist of more than one word, such as isVisible, the words are joined together and each word after the first begin with an uppercase letter.
n/b Variable may have the same name as another variable whose declaration appear in a different scope.



Scope
------------
-A variable's scope  is the block of code within the variable is accessible and determines when the variable is created and destroyed.
-The location of the variable declaration within you program establish its scope and places it into one of the following  four caterogiries:
                       member variable
                       Local variable
                       Method parameter
                       Exception-handler parameter.
                       
-A member variable - is a member of a class or object.
                   - It can be declared anywhere in a class but not in a method.
                   -the member is available to all code in the member variable.
-Local variable - can be declared anywhere in a method or within a block of code in a method.
                -In countChars, count is a local variable.
                -the scope of count, that is, the code  that can access count, extends from the declaration of count to the end of the countChars method.
                -Local variable is accessible from its declaration to the end of the code block in which it was declared.
-Method parameter - formal arguments to methods and are used to pass values into the method.
                  -passes values into  methods through parameter. You can also pass values into constructor in the same manner.
                  -In countChar, in is a parameter  to the countChars method.
                  -the scope of a method parameter is the entire method for which it is a parameter.
                  -In countChars, the scope of in is the entire countChars method.
-Exception-handler parameter - are similar to method parameter but are argument to an exception handler rather than to a method or a constructor.
                             - the countChars  method does not have any exception handlers, so it doesn't have any exception-handler parameter.
                             
                             
                             Variabls initializations
                             -------------------------
-Local variable and member variable can be initialized with an assigment statement when they are declared.
-The data type of both sides of the assignment statement must match.
-The countChars method provides an initial value of zero for count when declaring it.
-Method parameter and exception-handler parameter cannot be initialized in this way;
 the value for a parameter is set by the caller.
 
 Final variables
 --------------------
 -You can declare any variable in any scope to be final, including parameter to method and constructors.
 -The value of a final variable cannot change after it had been initialized.
 -To declare final variable, use the final keyword in the variable declaration before the type
     final int number=0;
 -Above statement declares a final variable and initialize it, all at once.
 -subsequent attempt to assign a value to Number results in a compiler error.
 -You can define and initialize it later.
 -A final variable that has been declared but not yet initialized is called a blank final


Operators
------------
-The countChars methods uses several operators; =, !=, ++ 
-operators performs function to one or three operands.
-Operators that require one operand are called unary operator.
-For example, ++ is a unary operator that increment the value of its operand by 1.
-operators that require two operands are binary operators. For example = . it asigns  the value from its right-hand operand to its left-hand operand.
-Tertiary operators are those that require three  operands .
-Java has one tertiary operand "?: " which is a short-hand of if else statement.
-Uninary  operator can use either prefix or postfix notation.
-Prefix notation means that the operator  appear before its operand.
      operator op
-Postfix notation means that the operator appear after the operand.
     op operator
-All java's binary operator use infix notation, which means that the operator appear between its operands.
    op1 operator op2
-Also, the tertiary is infix , each component of the operator appears between its operands.
   expr ? op1 : op2
-In addition to performing the operation, an operator also return a value.
-The value and its type depends on the operator and the type of its operands.
-Java operators are caterogied into: 
              arithimetic
              relational and conditional 
              bitwise and logical 
              Assignement
              
Arithmentics
--------------
-Java support verious  arithmentics operators for all floating-point and integer numbers.
-this include: addition(+), subtraction(-), multiplication(*), division(/) and modulo().
-The java language extends the definition of the +  operator to include string concatenation.
-The countChar method uses + to cancatenate 'counted', the value of count and 'char'.
      System.out.println("count" + count + "char.")
-This operator automatically coerces the value to a string.
-There also two arithmetic operation ++, which increments its operand by 1 and --, which decrement its operand  by 1.
-the countChars method uses ++ to increment the count variable each time it reads a character from the input source with this statement.
-In the countChars method, suppose that the count is 3 before the following statement is executed:
                 count++;
-After the statement is executed, the value of the count is 4. No surprises there. However, the statement count++ evaluate to 3.
-The prefix version of ++ would also set count to 4. however, the statement ++ count does not evaluate to 3 like the postfix version ++ does.
-The both statements are useful when the value of the statement is used in the middle of a more complex computation, for flow control, or for something else.
                      do {
                       } while(count ++ < 4);
                       
- op++ increments op by 1; evaluate to value before incrementing.
-++op increment op by 1; evaluate to value after incrementing.

                       
      Relational and conditional operators
      ----------------------------------------
-A relational operator compares two values and determine the relationship between them.
-!= returns true if the two operands are unequal.
-The countChar method uses != to determine whether the value returned by in.read is not equal to -1.
-op1 > op2( op1 is greater than op2).
-op1 >= op2 (op1 is greater than or equal to op2).
-op1 < op2( op1 is less than to op2).
-op1 <= op2(op1 is less than or equal to op2).
-op1 == op2 (op1 is equal to op2).
-op1 != op2 ( op1 and op1 are not equal)
-op1 instanceof op2 (op1 and op2 are assignment compatible).
-Relational operators  often are used with the conditional operators to construct more complex decision-making expression.
-one such operator is &&, which performs the boolean and operation.
-You can use two different relational operator along with && to determine if both relationships are true.
-Determining if an array index is between two boundaries. Also determine if the index is both greater than 0 or less than 
 NUM_ENTRIES(Which is a previously defined constant value)
     0<index && index < NUM_ENTRIES.
-In some instance, the second operand to a conditional operator may not be evaluated.
     ((count > NUM_ENTRIES) && (in.read() != -1))
-If count is less than NUM_ENTRIES, the left-hand operand for && evaluates to false.
-the && operator returns true only if both operands are true.
-So in this situation, the returned value of && can be determined without evaluating the right -hand operand.
-In such a case, java does not evaluate the right-hand operand.
-Thus  in.read won't get to called  and a character will not be read from the stream.
-The operator & is similar to && if both of its operands are of boolean type.
   
   binary conditional operators
   -------------------------------
-op1 && op2(op1 and op2 are both true, condition evaluate op2.
-op1 || op2 (either op1 and op2 is true: conditionally evaluates op2)
-! op (op is false)
-op1 & op2(op1 and op2 are both true: always evaluates op1 and op2.
-op1 | op2(either op1 or op2 is true: always evaluate op1 and op2)
-Java sopport tertiary operator and is basically shorthand for an if-else statement.
             expression ? op1 : op2
-The ?: operator evaluates expression and return op1 if it's true and op2 if its false.


Bitwise and logical operator
-----------------------------
-A bitwise operator allows you to perform bit manipulation on data.
            op1 >> op2 (shifts bits of op1 right by distance op2)
            op1 << op2 (shift bits of op1 left by distance op2)
            op1 >>> op2 (shifts bits of op1 right by distance op2 (unsigned).
            op1 & op2 (perform the bitwise and)
            op1 | op2 (perform the bitwise or)
            op1 xor op2(perform the bitwise xor)
           bitwise complement op (perform the bitwise complement).
-the three shift operators simply shift the bits of the  left-hand operand over by  the number of position indicated by the 
 right-hand operand.
 -The shift occcurs in the direction indicated by the operator itself.
 -For example:
         The following statement shifts the bits of the integer 13 to the right by one position
              13 >> 1;
-The binary representation of the number 13 is 1101.
-The result of the  shift operation is 1101 shift to the right by one  position 110 or six in decimal notation.
-The bit farthest to the right falls off the end into the bit bucket.
-The | operator perform the inclusive or operation.
-inclusive or means that if either of the 2 bits are 1, then the result is 1.
-Exclusive or means that if the two operands bits are different, the result is 1, otherwise the result is 0.
-the complement operator,  inverts the value of each bit of the operand. if the operand bit is 1, the result is 0 and if the
 operand bit is 0, the result is 1.
 -bitwise manipulations are useful for managing sets of boolean flags.
 -On having several boolean flags in your program  that indicate the state of various components in your program - is it visible, is it draggable and so on.
 -Rather than defining seperate boolean variable to hold each flag, you can define a single variable, flags for all of them.
 -Each bit within flags represents the current state of one of the flags.
 -You can then use bit manipulation to set and get each flag.
 -First set the constant that indicate the various flags for your program.
 -Each flags should each be a different power of  2 to ensure that the 'on' bit doesn't overlap with another flag.
 -then define a variable flag, whose bits are set according to the current state of each flag.
 -The following code sample initializes flags to 0, thereby indicating that all flags are false(that is no bit are set).
     final int VISIBLE = 1;
     final int DRAGGABLE = 2;
     final int SELECTABLE = 4;
     final int EDITABLE = 8;
     
 -To set the visible flag when something became visible, use this statement:
       flags = flags | VISIBLE;
 -To test for visibility, you then write:
        if (flags & VISIBLE)
         ...
        
        
        
        ASSIGNMENT OPERATORS
        ---------------------
 -Basically, it is used to assign on value to another (=).
 -countChars method uses = to initialixe count with this statement:
            int count = 0;
 -Java also provides several shortcuts assignment operators that allow you to perform an arithmentic, logical, or bitwise and assignment operation. 
 -Suppose you want to add a number to a variable and assign the result back into the variable ie 
       i = i + 2;
 -You can shorten this using the shortcut operator;
      i += 2;
      op1 += op2 ( op1 = op1 + op2)
      op1 *= op2 (op1 = op1 * op2)
 
 
 
 EXPRESSIONs 
 --------------------
-Expression perform the work of java.
-Used to compute and assign values to variables and to help control the execution flow of a program.
-the job of an expression is twofold: perform the computation indicated  by the element of the expression and return some value that  is the result of the computation.
-Expression is series of variable, operators, and methods calls(constructed according to the syntax of the language) that evaluate to a single value.
-Expression in countChars:
           in.read() != 1
-It consist of two expression, 
         the first expression is a method call.
                       in.read()
-A method call expression evaluates to the return value of the method.
-Therefore the datatype  of a method call expression is the same as the data type of its return value.
-The  in.read method is declared to return an interger , so the expression in.read() evaluate to an integer.
-the != compares two operands for inequality.
-in.read() != -1 compares two inegers: the value returned by in.read() and -1.
-The value returned by != is either true or false depending on the outcome of the comparison.
-Java allows you to construct compound expression and statemnts from various smaller  expression as long as the data types required by both parths of the expression
 match.
 -you can direct the java compiler to evaluate an expression in a specified order by using balanced parentheses().
 -Operators with a higher precedence get evaluated first.
 
 
 Control flow statement
 --------------------------
 -The countChars methods uses a while statement to loop through  all of the characters of the input source and count them.
             import java.io.*;
             public class Count{
              public static void CountChars(Read in) throws IOException
             {
             int count = 0;
             while (in.read() != -1)
                  count++;
             System.out.println("count" + count + "chars.");
             }
             // main method
             }
            }//close the class
-A while statement perform some actions while a certain condition remain true.
-General syntax of while statement.
         while(expression)
              statement
-That is, while expression is true., do statement. in countChars, while the read method return a value that is not -1, the program increment count.
-Statement can be one statement,  or it can be statement block.
-A statement block is a series of legal java statement containined within the curly brackets.
         while(in.read() != -1){
           count++;
           System.out.printLn("Read a character.count = " + count);
           }
-prints the count each time a character is read.
-though goto is a reserved word, currently java does not support goto statement. Use branching statement instead.
-Statement such as the while statement is a control flow statement, that is it determine the order in which other statement are excuted.


  control flow statements
  -------------------------
  Type of statement            keyword
  -------------------         ---------------
  -Decision-making           -if-else, switch-case
  -loops                     -for, while, do-while
  -Exception                 - try-catch-finally, throw
  -Branching                 - break, continue, label:, return
  
  
  -The if-else statement
  -------------------------
  -Enable your program to selectively execute other statement based on some criteria.
  -For example, if your program print debugging information based on the value of some boolean variable named DEBUG.
  -If the DEBUG is set to true, then your program prints debugging information such as the value of a variable x. otherwise, your program proceed normally, 
           if (DEBUG)
           System.out.printLn("DEBUG: x= " +x);
  -Above execute if some condition is true.
  -General syntax of if statement,
             if(expression)
                statement
  -suppose you want to excute a different set of statement if  expression is false, you can use the else statement for that.
  -suppose you program need to perform different actions depending on whether the user click  OK or CANCEL in an alert window.
  -You program could do this using an if statement and an else statement.
         if (response == OK){
           //code to perform ok action
         }else{
         //code to perform cancel action
  -This particular use of the else statement is the catch -all form.
  -the else block is executed  if the if part is false.
  -Another form of the else statement, else if, execute a statement based on another expression.
  -A prgram that assigns grades based on the value of a test score.
  -A for a score of 90 and above, B for a score above 80 and so on.
               int testScore;
               Char grade;
               if(testScore >= 90 && testSCore < 100){
                 grade = 'A';
               }else if (testScore >= 80 && testSCore < 90){
               grade = 'B';
               }else if (testScore >= 70 && testSCore < 80){
               grade = 'C';
               }else if(testScore >= 40 && testSCore < 70{
               grade = 'D';
               }
               else{
               System.out.println("You have to retake')
 -An if statement can have any number of companion else if statement, but only one else.
 
 
 
 The Switch statement
 -----------------------
 -A switch statement lets you conditionally perform statement based on some value.
 -Suppose your program contains an integer named months whose value indicates the months in  some date.
 -Suppose also that you want do display  the name of the month based on its integer equivant.
          int month;
          switch(month){
               case 1: System.out.println("January"); break;
               case 2: System.out.println("February");break;
               case 2: System.out.println("March");break;
               case 4:System.out.println("April");break;
               case : System.out.println("MAy");break;
               case: System.out.println("June");break;
               case 7: system.out.println("July");break;
               case 8: System.out.println("August");break;
               case 9: System.out.println("Sep");break;
               case 10:System.out.println("october");break;
               case 11:System.out.println("November");break;
               case 12: System.out.println("December");break;
               }
  -Switch statement uses a values, for this case the values  of month, to choose the appropriate case statement to execute.
  -You can also implement this on using the if statement.
      int mont;
      if (month==1){
         System.out.println("January");
     }else if(month == 2){
         system.out.println("February");
     }
     // like that to december.
 -Each case  statement must be unique, and the value provided to each must be of the same data
  type as the data type returnd by the expression provided to the swich
 statement.
 -The break statement cause control to break out of the switch  and continue with the first
  statement following the switch statement.
 -They are necesary because case statement fall through; that is, without an explicit break statement,
  control will flow sequentially through subsequence case statement.
 -The cetain scenarios in which you do want control to proceed sequentially through case statements.
 -however in other case you do wanr control  to proceed sequentially through case statement.
               int month;
               int numberDays;
               switch(month){
                  case 1:
                  case 3:
                  case 5:
                  case 7:
                  case 8:
                  case 10:
                  case 12:
                  numberDays = 31;
                  break;
                  case 4:
                  case 6:
                  case 9:
                  case 11:
                     numbDays = 30;
                     break;
                  case 2:
                       if ((year % 4 == 0) && (year % 100 != 0)) || year % 400 == 0))
                       numDays = 29;
                  else
                     numDays = 28;
                  break;
                 }
 -You can put default statement at the end of the switch to handle all values that aren't explicitly handled by one of the case statement.
     int month;
     int numDays;
     switch(month){
     case 1:
     case 3;
     case 5;
     case 7;
      case 8;
      case 10;
      case 12;
         numDays = 31;
      break;
      case 4;
      case 6;
      case 11;
          numDays = 30;
          break;
      case 2:
         if(((year % 4 ==0) && (year % 100 != 0))|| (year % 400 == 0))
          numDays == 29;
         else
            numDays = 28;
         break;
      default:
           System.out.println("Not recognised");
      break;
      if (month == 1)
       system.out.println("January");
      else if(month == 2)
       system.out.println("February");
      else if (month == 3)
       system.out.println("March");
      else if (month == 4)
       system.out.println("April");
      if (month == 5
       system.out.println("May");
      else if (month == 6)
       system.out.println("June");
      else if (month == 7)
       system.out.println("July");
      else if (month == 8)
       system.out.println("August");
      if (month == 9)
       system.out.println("September");
      if (month == 10)
       system.out.println("October");
      if (month == 11)
       system.out.println("November");
      if (month == 12)
       system.out.println("December");
      else:
      System.out.println("error");
      
     }
      
                  
  
      
  
           


                loop statements
                ------------------------------
-Other than the  while statement, java also has other loop statements, and those are:
           for loop
           do-while loop
-For loop is used if you know the constraints of the loop.
-Its initialization, insruction, termination croteria and increment  instruction.
-Often used to iterate over the elements in an array or the characters in a string.              
           //array of some kind
           int length = a.length;
           for(int i = 0; i < length; i++){
           //do something to the  element a
           }
-for loop is good for writing  program that you want to start at the beginning of the array, stop at the end and hit every element.
-The general form of the for statement;
            for (initialuzation; termination; increment)
                statement
-Initialization is a statement that initializes the loop - it is executed once at the beginning of the loop.
-Termination is an expression that determine when to terminate  the loop.
-This expression is evaluated at the top of each iteration of the loop.
-When the expression is evaluated to false, the for loop terminates.
-Increment is an expression that gets invoked for each iteration through the loop.
-Any (or all) of these components can be empty statement.
-do-while  loops is similar to the while loop , except that the expression in evaluated at the bottom of the loop.
      do{
      statements
      }
      while (booleanEXpression);
      
-Do-while statement is a less common loop construct in programming.
-Convenient when the statement within the loop must be executed at least once.
-For example, when reading information from a file, you always have to read at least one character if only to find out if the character is the end-of-file character.
      int c;
      reader in;
      do{
      c = in.read();
      ..
      }while (c!=-1);
      
      
      Exception-handling statement
      --------------------------------
-used to throw  exception indicated to its caller  that an error occured and type of  error that occured.
-The calling method can use the, try, catch, and final statement to catch and handle the exception.



    Branching statements
    --------------------------
-Break causes the flow of control to jump to the statement immediately following the current statement.
-Another form of the break statement cause flow of control to break out of labeled statement.
-Continue statement within loops to jump to another statement.
-The continue statement has two forms: unlabeled and labeled.
-If you use the unlabeled  form , control transfers to and reevaluates the termination condition of the loop.
-In for and while  loop, this means that the control returns to the top of the loop, 
-In do-while loops, this mean that control returns to the bottom of the loop.
-The continue statement can be called from within the loop.
-The label form of continue statement continue at the next iteration of the labeled loop.
-Implementation of the String class's  indexOf method, which uses the label form of continue:
          public int indexOf(String str, int formIndex){
                 char[] = value;
                 char[] = str.value;
                 int max = offset + (count - str.count);
               test:
                  for (int i = offset + ((fromIndex < 0) ? 0 : formIndex);
                       i <=max ; i++){
                       int n = str.count;
                       int j = i;
                       int k = str.offset;
                       while (n-- !=0){
                          if (v1[j++] != v2[k++]){
                              count test;
                              }
                            }
                            return i - offset;
                           }
                         return -i;
                        }                        
        
 -Return statement is one of the java  branching statement.
 -A return statement is used to  exit from the current method and proceed with  the statement that follow the original  method call.
 -The are two forms of return. One returns something while the other return nothing.
 -To return a value, put a value or expression that calculate the value.After the return keyword.
   return ++count;
 -The data type of the value returned by  return must match the type of the method's  declared.
 -When a method is declared void, use the form of  return that does not return a value.
     return;
 
 
 Array and strings
 -----------------------
 -Java allow someone to collect and manage multiple values through an array value.
 -You manage data comprised of multiple characters through a String objects.
 
 
 
 Arrays
 --------------
-Count class's main method declares an array as parameter to main.
-Before you can use an array, you first declare it.
-Declaration of an array has two primary components: the array type and the array  name.
-The array type include the data type of the elements contained within the array.
-The array type of an array's  element  must be identified when the array is declared.
-A declaration for an array of integer.
    int[] arrayOfInts;
-The int[] part of the declaration indicates that arrayOfInts is an array of integers.
-The declaration does not  does not allocate any memory to contain the array element.
-if Your program attempts to assign or access a value to any elements of arrayOfInts before memory of it has been allocated, the compiler prints an error message.
-To allocate memory to an element of array, you must first instantiate the array.
-You use the java's new operator to instantiate the arrays.
-The steps you take to create an object is the same as the steps you take to create an class.
-Declaration, instantiation and initializations.
-ALocation enough memory for arrayOfInts to contain ten integers.
         int[] arrayOfInts = new int[10];
-In general, to create array, you use the new operator, the data type of the  array 
 element and the number of element desired, enclosed within the square brackets.
     elementType[] arrayName = new elementType[arraySize]
-Now that memory has been allocate to the array, you can assign values to its element and retieve those values.
      for(j=0; j<arrayOfint.length; j++){
         arrayOfInts[j]=j;
         System.out.println("[j] = "+arrayOfInts[j]);
       }
       
-To reference an array element, you append square brackets to the array name.
-Between the square brackets indicate (either with variable or some expression ) the index of th element you want to access.
-Array indices begins at 0 and ends at the array lenght minus 1.
-The For loop iterates through each element of arrayOfInts, assign value to its element and printing out those values.
-The use of arrayOfInt.length retrieves the current length of the array.
-Length i a property provided to all java array.
-Let as look again at the main method that calls countChars. Note the use of args array.
       import java.io.*;
       public class Count{
         //the countChars method omitted
       public static void main(String[] args) throws Exception{
          if (args.length >=1)
              countChars(new FileReader(args[0]));
          else
             System.out.println("Use: count filename");
             
          }
       }
-The java runtime allocates the space for the args, so main doesn't have to bother with it.
-The main method ensur that there's atleast one element in the args array, and if there is, 
  its uses the first element in the array(presumably the name of a file) to open a fileReader.
-Java can contain any legal java data type, including reference type such as objects or other arrays.
-Declaring and allocating memory for an array of ten String objects.
           String[] arrayOfString = new String[10];
-The elements in this array are reference type, that is, each element contains a reference to a string object.
-At this point, enough memory has been allocated to contain the String references, but no memory has been allocated for the string object themselves.
-If you attempt to access one of the arrayOfStrings elements at this point, 
 you will get a nullPointException because the array is empty and contains no String objects.
-Alocating actual string objects separately.
       for(j=0; j<=arrayOfString.length; j++)
         arrayOfString[i] = new String("String"+ i);
         
-You use arrays when you know in advance the required size of the array.
-If you don't know the size of array that you need, consider using the java.util.vector class which implement a growable array.


Strings
-------------
-A sequence of characters data .
-Implement in java platform by the string class.( a member of the java.lang package).
-Count's ,main uses String in its declaration of the args array.
      string[] args
-This statement explicitly declares an array named args that contains String objects.
-The empty brackets indicates that the length of the array is unknown at compilation time because the array is passed in at runtime.
-The CountChars method also use two strings both in the form of a literal string(a series of characters between double quotation marks)
       "count"
       "chars"
-The program implicitly allocate two string objects, one for each of the two literal string above.
-String objects are immutable, that is they cannot change once they have been created.
-The java.lang package provides a different class, stringBuffer which you can use to create and manipulate character on the fly.



String concatenation
--------------------------
-Java lets you concatenate strings together using the + operator.
-code snippets concatenates three strings together
    "counted " + count + " chars"
-Counted and chars are string literals.
-count is an integer that first gets converted to a string and then concatenated to the others.



Objects and classes
---------------------
-To understand object, you must understand classes. To understand classes, you need to understand objects.

brief introduction to classes
-------------------------------
-Snipet code for a class called pointer that represent a pointer in 2D space.
       public class point{
           public int x = 0;
           public int y = 0;
         }
-This segement of code declares a class- a new data type really- called point.
-The point class contains two integer member variable x and y.
-The public key-word preceding the declaration for x and y means that any other class can freely access these two members.
-You create an object from class such as point by instantiating the class.
-When you create a new point object, space is allocated   for the object and its members x and y.
-In additon, the x and y members inside the objects are initialized to 0 because of the assignment statement in the declaration of the wo members.
-A class rectangle that represents a rectangle in 2D space.
       public class Rectangle{
            public int width =0;
            public int length =0;
            public point origin = new Point();
            
          }
-This segment of code declared a class Rectangle that contains two intergers  members width and length.
-the rectangle also contains a third member, origin, whose data type is point.
-{oint is used in a variable declaration as the variable's type.
-You can use the name of a class anywhere you can use the name of the primitive type.
-Just has width "is an" integer, length "is an" integer, origin "is  a " point.
-A Rectangle object had a point. The distinction between is and has a is critical because only an object that is a point can be used where a point is called for.
-As with point, when you create a new Rectangle object, space is allocated for the object and its members.
-The Member are initialized according to their declaration.
-The initialization for the origin member creates a point object with code new point()
-A rectangle would provide method for  computing its area, and because  Rectangle creates a  point where  
  it's created, the class should provide for the clean  up of the point when Rectangle gets cleaned up.
-A new version of point that contains a constructor which you can use to initialize a new point to a value that (0, 0).
      public class Point{
        public int x = 0;
        public int y = 0;
        //constructor!
        public Point(int x, int y){
          this.x = x;
          this.y = y;
          }
        }
-On creating a point, you can provide initial values for its like
     new point(33, 3)
-The values 33 and 3 are passed into the constructor and subsequently assigned to the x and y members of the new point object.
-A rectangle that contains four constructors, a method to move the rectangle, 
  a method to compute the area of the rectangle, and a finalize method to provide for the clean up.
         public class Rectangle{
             public int width = 0;
             public int length = 0;
             public point origin;
             //four constructors
             public Rectangle(){
                   origin = new Point(0, 0);
                  }
             public Rectangle(Point p){
             origin = p;
             }
             public Rectangle(int w, int l){
                this(new point(0,0), w, l);
                }
             public Rectangle(Point p, int w, int l){
                origin = p;
                width = w;
                length = l;
                }
             //A method for moving the rectangle
             public void move(int x, int y){
                 origin.x = x;
                 origin.y = y;
                 }
             //A method for computing the area of the rectangle
             public int area{
                return width*length;
                }
             //clean up!
            protected void finalize() throws Throwable{
              origin = null;
              super.finalize();
              
-The four constructor allow for different type of initialization.
-You can create a new rectangle and let it provide default values for everything, or you can specify initial values for the origin, the origin, the width and the height, or all the three.
-Before the end of this section reading, i should understand;
      -that object are created from  classes.
      -An object's  class is  its type.
      -The difference between reference and primitive types.
      -How to create objects from classes.
      -What constructors are.
      -What the code for a class looks like
      -What a member variable are
      -How to initialize an object.
      What methods looks like.
      
      
      
      
Life cycle of an object
-------------------------
-Java program creates many objects from a variety of classes.
-Objects interact with one another by sending messages.
-Through these, objects interaction, a java program can implement a GUI, run an animation, or send  and receive information over a network.
-Once an object has completed the work for which it was created, it is garbage-collected and its resource are recycled for use by other objects.
-The following three sections, describe the typical life cylce of an object.
   1.creation
   2.use
   3.Destruction

Creating an object
--------------------
-in java, you create an object by creating an instance of a class or, in other words, instantiating a class.
-creating a new rectangle object from the Rectangle class.
                  Rectangle rect = new Rectangle();
-The single statement above perform three actions;
        Declaration - Rectangle rect is a variable declaration that declares to the compiler that the name  rect  will be used to refer to a Rectangle 
        object.
                    -Class name  is used as  the variable type. 
        Instantiation - new is a java operator that create the new object(allocates  space for it).
        Initialization  - Rectangle() is a call to Rectangle's constructor, which initialize  the object.


Declaring an object
---------------------------
-The Declaration is not a necessary part of object creation, although it often appear on the same line.
-Like other variable declaration, object declaration can also appear alone
      Rectangle rect;
-To declare an object, you just follow the same rules and declare a variable to refer to that object by declaring its type and name;
          type name
-Classes and interfaces can be used as data types.
-So types can be the name of a class such as the rectangle class or the name of an interface.
-Both class and interfaces are reference types(the variable's values is a reference to the value or set of values represented by the variable).
-Reference may also be called an object reference or array reference, depending on the data to which the reference refers.
-Declaration notify the compiler that you will use name to refer to a variable whose type is type.
-Declaration do not create new objects.
-Rectangle rect does not create a new Rectangle object, just as variable named rect to hold a Rectangle object.
-To create a Rectangle object  or any other objectm use the new operator.



Instantiating an object
-------------------------
-The new operator instantiates a class by allocating memory for a new object of that type.
-New require a single, postfix argument: a call to a constructor.
-Each java class provides a set of constructors used to initialize new objects of that type.
-The new operator creates the objects, and the constructor initializes it.
-Using the new constructor to create a Rectangle object.
      new Rectangle(100,  200);
-Rectangle(100, 200) is the argument to new.
-The new operator returns a reference to the newly created object.
This  reference can be assigned to a variable of the appropriate type.
       Rectangle rect = new Rectangle(100, 200);
-rect refers to a rectangle object whose origin is at(0,0) width is 100 and length is 200.


Initializing an object
----------------------------
-A class can provide one or more constructors to initialize a new object of that type.
-You can recognize a class constractor  because  they have the same name as the class and  have no return  type.
-Rectangle constructors.
       public Rectangle(point p)
       public Rectangle(int w, int l)
       public Rectangle(point p, int w, int l)
-Each of these constructor lets you provide initial  values for different aspects of the rectangle.
-The origin, the width and length, all three or none.
-If a class has multiple constructors, they all have the same name but different number of argument or different typed arguments.
-The compiler differentiates the cnstructors, and knows which one to call, depending on the argument.
-So when the compiler encounters the  following code, its knows to call the constructor that requirement two integer argument(which 
  initializes the width and heights of the new rectangle to the values provided by the arguments).
              Rectangle rect = new Rectangle(100, 200);
-When the compiler encounter the next line of code, it knows to call the constructor that requires a point(which provides the initial values for
 the origin of new Rectangle).
           Rectangle rect = new Rectangle(new point(33, 232));
-A rectangle constructor that does not take any arguments.
                    Rectangle rect = new Rectangle();
-A constructor that does not take any argument is a default constructor.
-If a class(like the very first version of the point and rectangle classes) does not explicitly define any constructors at all.
-Java automatically provides  a non-argument constructor that does nothing. thus a class have atleast one constructor.



Using objects
-----------------
-Once you create an objects, you probably want to use it for something.
-You may need  information from it, want to change its state,  or have it perform some action.
-object gives you two ways to do these things.
       Manipulate or inspect its variables.
       Call its method.
-ideal object-oriented programming discourages the direct manipulation of an object's variable.
-You can put objects into inconsistent states.
-An ideal objects provides methods through which you can inspect or change its state.
-These methods ensures that object never get inconsistant state.
-in some situation, it sometimes makes  sensense to use an objects's variable directly.
-Both the point class and the Rectangle class allow free access to their member variables.
-You can put the point into an inconsistent state  by setting x and y directly .
-You can also put the Rectangle objects in an inconsistent state by setting  width, length, or origin.
-Java provide access contro mechanism whereby classes can restrict or allow access to its variable or method.
-A class should protect variable against direct manipulation by other  objects if those manipulation could endanger the object state.
-State changes should then be affected and therefore controlled by method calls.
-If an object grants access to its variable, you can assume that you can inspect and change them without adverse effects.
-If a rectangle obect represents a rectangle object in a drawing program and the user dragged it to a new location. 
-You need to update the rectangle object's point of origin,
-The rectangle can provide two equivant ways of doing this;
       1.manipulating the object's origin variable directly.
       2.call the move method.
       
-Rectangle's origin member is accessible to other classes(it's declared public).


Referencing an object variable
----------------------------------------
-This section focuses on how to move the rectangle by modifying its origin  variable directly.
-Assume you created a rectangle named rect. 
To move rect to new location, you could:
        rect.origin = new point(15, 37);
-This statement moves the rectangle by setting its points of origin to a new position.
-rect.origin is the name of rect's  origin variable.
-You can use these kinds of object variable names in the same  manner as you use other variables names.
-You use the operator = to assign a value to rect.origin.
-The Rectangle class has two other variables - width and length that are accessible to objects outside of  the class.
-You use the same notation to access them and calculate the rectangles area using this statement(or just call the area method).
    area=rect.height*width;
-In general, to refer to an object's variable, append the name of the variable to an object reference with an interventing period(.).
     objectReference.variable
-The first part of the variable's name, objectReference, must be a reference to an object.
-you can use an object name here just as was done in the previous example with rect.
-you can also use an expression that returns an objects reference.
-Recall that new operator returns a reference to an object.
-So you could use the value returned from new to access a new object variable.
      height = new Rectangle().height;
-This statement creates a new Rectangle object and immediately gets its height.
-Effectively the statement  calculates the default height of a rectangle.
-After this statement has been executed, the program no longer has a reference  to the rectangle that has created because the program never stored the reference
in a variable.
-Thus objects become eligible for garbage collection.
-All objects of the same type have the same type have the same variable.
-All Rectangle objects have origin, width, and length variable that they  got from the rectangle class.
-When you access a variable through an object reference, you reference that particular objects.
-Suppose that bob is also a rectangle in your drawing program and it has different length and width.
-Calculating area called rectangle named bob, which differs from the previous instruction that calculates the are  of rect.
       area=bob.length+*bob.width;



Calling an object's methods
--------------------------------
-To move rect to a new location using its move method.
            rect.move(15, 37);
-The java statement above calls rect's  move method with two integer parameter, 15 and 37.
-It moves the rect object because the move method assign new values to origin.x and origin.y  and is equivalent to assignment statement used previously.  
           rect.origin = new point(15, 37);
-the notation used to call an object's method is similar to that used when referencing to its variable.
-You append the  method named to an object reference with an interventing period(.)
-Also, you provide any argument to the method within enclosed parenthesis.
-If the method does not require any argument, use empty parenthesis.
        objectReference.methodName(argumentList);
        objectReference.methodName();
-Object  reference must be a reference to an object.
-You can use a variable name here, but you also can use any expression that returns an object reference.
-The new operator returns an object reference, so you can use the value returned from new to call a new object's method.
          new Rectangle(100, 50).area()
-The expression new Rectangle(100, 50) returns an object reference that refers to a rectangle object.
-You use the dot notation to call the new Rectangle's area method to compute the area of the new rectangle.
-some method, like area, returns a value. For methods that returns a value, you can use the method call in expression.
-You can assign the return value to a variable,  use it to make a decision or control a loop.
-This code assigns the value returned by area to a variable.
        int areaOfRectangle = new Rectangle(100, 50).area();
-Invoking a method on a particular object is the same as sending a message to that object.
-In this case the object is Rectangle called rect.



Cleaning up unused objects.
----------------------------
-The java runtime environment deletes objects when it determines that they are no longer being used.
-This process is called garbage collection.
-An object is more eligible to garbage collection when there are no more reference to that object.
-Reference that are held in a variable are naturally dropped when the variable goes out of scope.
-or you can explicitly drop an object reference by  setting the value to null.



The garbage collector.
---------------------------
-Java platform has a garbage collector that periodically frees the memory used by objects that are no longer  needed.
-It is a mark-sweep garbage collector.
-A mark-sweep garbage collector scans dynamic memory area for objects and marks those that are referenced.
-After all possible paths  to objects are investigated, unmarked objects(unreferenced objects) are known to be garbage and are collected.
-A more complete description of java's garbage collection algorithm might be 'a  compacting, mark-sweep collector with some conservation scanning).
-The  garbage collector  runs in a low-priority thread and runs either synchronously or asynchronously depending on the situation and the system on which java is running
-It runs synchronously when the system runs out of memory or in response to a request from a java program.
-Java garbage collector runs asynchronously  when the system is idle, but is does so  only on system, such as windows 95/NT.
-That allow the java runtime environment to note when a thread has begun and to interrupt another thread.
-As soon as another  thread becomes active, the garbage collector is asked to get to a  consistent state and terminated.


Finalization
--------------------
-Before an object gets garbage-collected, the garbage collector gives the object an opportunity to 
  clean up after itself through a call to the object's finalize method.
-During finalization, an object may wish to free system resource such as files and sockets or to drop reference  to other objects.
 so that is becames eligible for garbage  collection.
-The Finalized method for the Rectangle class  releases the point object  by setting its reference to  origin  to null.
         protected void finalize() throws throughable{
               origin = null;
               Super.finalize();
          }
-The finalize method is a member of the object class.
-The object class is top of java's class hierarchy and the parent of everything.
-A class should overide the finalize method to perform  any finalization necessary for object 

  
  
  
  
  
  
  













            
     
                
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      



































 

 







































