Java - programming language and a platform.
java is a high level language with the following characterist:
       It is simple
       object oriented
       distributed
       interpreted
       Robust
       Secure
       Architecture-neutral
       portable
       high performance
       multithreaded
       Dynamic
       
-Java program is both compiled and interpreted.
-With compiling, you transilate the java program into intermediate language called bytecodes.
-the bytecode is interpreted by the java interpretor.
N/b compilation occurs once while interpretation occur each time the program is executed.
-We can also say java bytecodes is a machine code instruction for java virtual machine.
-java program can be compiled into bytecode on any platform that has java compiler.
-Java platform has two components, and this are :
     -JM(The java virtual machine)
     -Java API (the java application programming interface.
-Java API is a large collection for ready-made software components that provides useful capabilities such as:
       Graphical user interface(GUI) widgets
-Java API is grouped into  libraries(packages) of related components.
-Java is platform independent
-It is slow than the native code.
-Java applet is a java program that adheres to certain convention that allow it to run within a java enabled browser.
-server serves and supports clients on a network. Examples are:
      Web server
      proxy server.
      mail server.
      printer server.
      boot server.
      
-servlets are similar to applet in that they  are runtime extensions of applications .
-they run within the java server, configuring or tailoring the server.
-The core API is the API included in every full implementation  of the java platform.
-It gives the following features:
                 The essentials:objects, strings, threads, numbers, inputs, and outputs, data structures, system properties, data and time.
                 Applets: the sets of conventions used by java applets
                 networking is the tcp and UDP sockets and IP addresses.
                 internationalizations, helps in localising for users widewide.
                 security - both low level and high level including the electronic signature.
                 Software components - 
                 object serialization - allows lightweight persistence and communication via Remote method invocation(RMI)
                 java Database connectivity(JDBC) - provides uniform access to a wide range of relational databases.
-JVM and Java API insulates the java program from hardware dependancies.
-Why java  - Quick to start 
           - Less  code
           -better codes - ie encourages garbage collections that help avoid memory leaks.
           -program faster.
           
-Practical exercise:
       -Java file should have exact name as the class name.
       -compiling the the java source file, you exacute;
                javac filename.java
       -After successful compilation, a file name filename.class is create in the same directory. This class file contains the java bytecode-platform-independt codes
       interpreted by the java interpreter.
       -To run the application type:
            java filename.java
       -Your output will be displayed in the window where you invoked the interpreter.
       -Java methods(function-block of code) and variables should exist within a class.
       -The entry point of java application is the main method.
       -When you run application with class name, the interpreter invoke the main method in that class.
       -The main method control the flow of the program.
       -components of the java application are: objects, class, methods and java statements.
       
       
       Comments in java
       --------------------
       -/* text */ 
       -/** documentation */
       -//text
       
       Defining a class
       ---------------------
       -Is the besic building block of an object-oriented language.
       -It the blueprint  that describe the state and behavior associated with instances of that class.
       -Instanciating a class means that you create an object that has the same state and behaviors as other instances of he same  class.
       -state associated with  a class or object is stored in member variables.
       -The behavior  associated with a class or object is implemented with method.
       -Every java application must contain the main method:
               public static void main(String[] args){
                  //body of main method
                 }
      -The main method starts with three modifers
           -public - allows any class to call the main method
           -static - means that the main method is a class method
           -void - indicate that the main method does not return any value.
      -On invoking the java interpreter,you start by calling the class  main method, that will call other methods that will be required to run the application.
      -
      
      Arguments to the main method
      -------------------------------
      -While declaring the main method, you can pass arguments: an array of string for example:
            public static void main(String[] args)
      -This array is the mechanism through which the java VM passes information to your application.
      -Each string in the array is called a command-line argument.
        
        
       Using Classes and Objects
       --------------------------------
       -System class provides system independent access to system dependent functionality.
       -One feature provided by the system class is the standard output stream- a place to send text that usually  refers to the terminal  window in which you invoke 
       the java interpreter.
       -Standard output stream is used during the development cycle.
       
       Using a class variable
       ----------------------------
       Example:
           System.out.println("AM learning java")
       -The construct System.out is the full name of the out variable in the system class.
       -The application never instantiates the system class. Instead, it refers to out directly through the class.
       -This is because out  is a class variable -a variable  associated with a class rather than with an object.
       -The java allocates a class variable once per class , no matter how many instances of that class exist.
       -Class method implement class-specific bahavior.
       
       
       Applet
       ------
       -It facilitates the java program to be included in HTML pages and executed in java enabled browser.
       -To compile and run applet, you can use tools from the JDK
       -JDK compiler allows you to compile any kind of java program.
       -JDK applet viewer lets you run java applet.
       
       Creating java source file
       --------------------------
       -Create a file called LetUsAllLearnJava.java
         import java.applet.Applet;
         import java.awt.Graphics;
         public class LetUsAllLearnJava extends Applet{
           public void pain(Graphics g){
           g.drawString("Dudes i fkoech tell you to learn java" 30, 20);
           }
          }
      
           
           Creating an HTML File that includes the Applet
           ----------------------------------------------------
    -Create a filename.html in the same director of yourfilename.class.
    -HTML file should contains:
        <html>
        <head>
        <title>title name</title>
        </head>
        <body>
        <Applet Code="yourfilename.class" Width 140px height=20>
        </Applet>
        </body>
        </html>
            
-Java applet is a program that adheres to a set of conventiond that allow it 
to run within a java-enabled browser.
-procedure to write a applet program.
  1) you import classes or packages.
  import java.applet.Applet;
  import java.awt.Graphics;
-A class can easily refer to classes in other packages.
-Packages are used to group classes.
-similar to the way libraries group c functions.
-Every applet must define a subclass of the applet class.
-Applet inherit a great deal of functionality from the applet class, ranging  from the  ability
 to communicate with the borwser to the ability to present a 
Graphical user Interface(GUI).
-Applet implements just one method: paint: every applet must implement at least one of the following methods:
 init, start, or paint.
-Unlike the java applivation, java applet do not need to implement a main method.
-Applet are designed to be included  in HTML page.
-Using the <APPLET> HTML tag, you specify(at a minimum) the location of the applet subclass and the dimension of the applet's on screen display area.
-When a java-enabled browser  encounters an <applet> tag, it reserver on screen space for the applet,
 loads the applet subclass onto the computer on which  it is executing and creates an instance odf the applet subclass

Importing classes and packages
----------------------------------
-The java.applet. and java.awt prefixes tell the compiler which packages it should search for the applet and Graphic class.
-the Java.applet packages contains classes that are essential to java applet.
-The java.awt package contains classes used by all java program with a GUI
-The java.awt package contain classes used by all java programs with a GUI
-To import  entire package: 
           import java.applet.*;
           import java.awt.*;
-In the java language, every class is in a package.
-If the source code for a class doesn't have a package statement at the 
 top declaring in which package the class is, then the class is in the default package.
 -Without a package, all classes can refer to each other without prefixes ie
  java.awt component  class refers to the java.awt graphics class without  any prefixes  and without importing the graphics class.
  
  
  Defining an applet subclass
  ---------------------------------
  import java.applet.APPLET;
  import java.awt.Graphics;
  public class Amlearning extend Applet{
   public void paint(Graphics g){
     g.drawString("Learning java is cool!" , 100, 40);
     }
  }
 -The extends keyword indicates that Amlearning is a subclass of the class whose name follows: Applet.
 -From Applet class, applet inherit a great deals of functionality. Perhaps most important is the ability to respond to browser request.
 
 
 Implementing Applet Methods
 ---------------------------------
 -Every applet implements one or more of the init, start, and paint methods.
 -the graphics object passesed into the paint method represents the  applet's  on-screen drawing on-screen
 -the applet draws the string "learning java is cool" starting at location (100, 40)
 -<APPLET CODE = "SimpleInterest.class" WIDTH= 120 HEIGHT=30>
 -The applet tag species that the browser should load the class whose compiled code(bytecode) is in the file named SimpleInterest.class.
 -If you include an applet twice in one HTML page, the browser loads the class file once and creates two instance of the class.
 -the width and height attributes are like the attributes of the same name in an <IMG> tag:
 -They specifies the size in pixels of the applet's display area.
 
 Object oriented programming concepts
 ---------------------------------------
 -real world object share two characteristics: they have state and behavior.
 -For example dog  have state(name, color, breed, condition of being angry) and have behavior(barking, fetching , slobbering)
 -A software objects mains its state in variables and implements its behavior with methods.
 -An object is a software bundled of variables and related methods.
 -Everything that the software object knows (its state) and can do (its behavior) is expressed by the variable and method within that object.
 -object interact with another object through the public interface.
 -object can change its private information without affecting another objects as 
   long as the syntax and semantics  of the object's public interface remains the same.
 -Java objects can specify exact which other object have access based on inheritance and ,package relationship.
 -hiding information within an object's nucleus and then providing  a  public interface for interaction with it is called encapsulations.
 
 
 Benefits of objects
 -------------------
 -encapsulating related variables and methods into  a neat software bundle is a simple yet powerful idea that provides  two major 
 benefits to software developer.
 -Modularity - the source code for an object can be written and maintained independently from the source code for other objects.
 -An object can be easily passed around in the system.
 -information hiding -  an object has a public interface that other objects can use to communicate with it.
  However, the object can maintain private information and methods that can be changed at any time  without affecting the other objects that depend on it.
  
  
  
  What is message
  ----------------------
-A single object alone is generally not very useful and usually appear as a commponent of a large  program or application contains many other objects.
-Through the interaction of this objects , programmers achieve  higher-order functionality and more complex behavior.
-software objects interact and communicate with each other by sending messages to each other.
-information is passed  along with the message  as a parameter to a method.
-Three components that comprise a message.
  1)The object to whom the message is addressed(bicycle)
  2)the name of the method to perform (Change Gears)
  3)Any parameter needed(lowegear)
  
  Benefit of messages
  ---------------------
-An object behavior is expressed through its methods, so aside from direct variable access, message passing support all
possible interactions between objects.
-Objects dont need to be in the same process or even on the same machine to send and receive messages back and forth to each other.




What is a class
---------------------
-Using the object-oriented terminology, we say that your bicycle is an instance of the class of objects known as bicycles.
-Bicycle have in common some state(eg the current gear, cureen cadence and two wheels) and behavior( they change gears and brakes)
-In object-oriented some objects of the same kind sharing the same characteristics.
-Examples are the:
                rectangle;
                employee records
                video clips
-You can take advantage of the fact that objects of the same kind are similar,  and you can create a blueprint for those objects.
-Software blueprints for objects are called classes.
-A class is a blueprint or prototype that defines the variable and methods common to all objects of a certain kind.
-A classs can define not only the instance variable and instantance methods, but also the class variable and class method.
-You can  access class variable and methods from an instance of the class or direct from a class.
-You dont have to instanciate  a class variable and methods.
-A class mehod can operate only on class variable. They cannot access instance variable or instance methods.
-The system creates a single copy of all class variable for a class the first time it encounters the class in a program.
-All instance of that class share its class variable.



Objects versus Classes
---------------------------
-Software objects are abstract concept.
-objects have values while classes does not.

Benefits of classes
----------------------
-objects provides the benefit of modularity and information hiding.
-Classes provide the benefits  of reusability.
-Software programmers use the same class, and thus the same code, over and over again to create many objects.


What is inheritance
--------------------------
-objects are defined in terms of  classes.
-In object-oriented terminology, mountain bikes, racing bikes and tendems are all the subclasses of the bicycle class, while the bicycle class is the superclass 
 of mountain bikes, racing bike, tandem.
 -Each subclass inherits state(in the form of variable declarations) from the superclass.
 -mountain bike tendem and racing bike share the  same state.
 -They also inherit the method from the superclass.
 -Subclass are not limited to the state and behavior provided to them  by their superclass. They can add other variables and methods.
 -subclasses can also override inherited methods and provide specialized implementations for those methods.
 -One is not limited  to just one layer inheritance. The inheritance tree or class hierarchy, can be as deep  as needed.
 -Methods and variables are inherited down through the levels.
 -In general, the further down in the hierarchy a class appears, the more specialized its behavior.
 
 Benefits of inheritance
 ------------------------------
 -Subclass provide specialized behavior from  the basis of  common elements provided by the superclass.
 -Using inheritance, programmer can reuse the codes in the superclass many times.
 -programmer can implement superclass called abstract class.
 -the abstact class defines generic behavior.
 -The abstract superclass defines and may partially implement the behavior but much of the class is underfined and unimplemented.
 -Other programmers fill in the details with specialized subclasses.
 
 
 Nuts and bolts of the java language
 -------------------------------------
 import java.io.*;
 public class Count{
  public static void countChars(Reader in) throws IOException
   {
   int count = 0;
   while(in.read() != -1)
      count ++;
   System.out.print("counted" + count + "characters");
   }
  //main method
  public  static void main(String[] args) throw Exception
  {
  if (args.length >=1 )
    countChars(new FileReader(args[0]));
  else
     System.out.println("usage: count filename");
    }
 }
-Above lines of code describe the traditional java language features, ie variables, data type, operators, expressions, control flow statements.


Variables and data types
------------------------------
-Variables are entities (values and data) that act or are acted upon.
-the countChars methods defines two variables count and in.
-the program increments count each time it reads a character from the other variable in.
-Variable declaration always contains two components: the type  of the variable and its name.
-Where the declaration appears in relation to other code element, determine its scope.


Data types
------------
-All variable in java must have data type.
-Data type determines the values that the variable can contain and operation that can be performed on it.
-Declaring int count declares that count is an integer(int). Interger can only contains only whole number values(both positive and negative) and one can use
standard arithment operations such as +, - , / on interger to perform the standard arithmentic operation(addition, subtraction, multiplication, and division).
-The are two categories of data types in the java language
            primitive
            reference
            
            
primitive data types
---------------------------
-integers 
       -byte
       -short
       -int
       -long
-Real numbers
        -float
        double
-char
-boolean

-A variable of primitive type contains a single values of the  appropriate size and format for its type:
                characters
                numbers
                boolean
                
                
                
                
Reference types
-------------------
-They include:
         Arrays.
         classes.
         interfaces.
-A reference to the actual value or set of values represented by the variable.
-They are like your friends  address. The address is not you friend but the way to reach your friend.
-A reference type variable is not the array or objects itself but rather a way to reach  it.
-The countChars method uses one variable of reference type in, which is a reader object.
-When used in a statement or expression, the name in evaluates to a reference to the object.
-So you can use the object's name to  access its member variables or call its methods.(just as countChars does to call read).


-N/B - data type supported by c and C++ that are not supported by the java language
         pointers
         structures
         unions
     -in java  you use classes and interfaces instead.
-Objects and arrays are reference  data types. Variable of this type  evaluate to a reference.
-Reference is similar to pointers used in other languages such as and C++.
-Java does not have explicit type, you cannot construct a reference to anonymous memory.
-This makes programming easier, well as prevents common error due to pointer mismanagement.
-java language does not support either structure nor union.
-instead it uses classes or interfaces.
-Classes and interfaces allow you to bundle together  data and method and to control who has access to those classes members.
-this makes them much powerful that structured and union.


Variable name
--------------------
-A program refer to a variable value by its name.
-CountChars method wants to refer to the value of the count variable, it simply use the name count.
-the following must hold  true for java variable.
     -It must be a legal java identier comprised of a series of unicode characters.
      unicode is a character-coding system designed to support text written in diverse human languages.
      -It must not be a keyword or boolean literal.
      -It must not have the same name as another variable whose declaration appear in the same scope.
-By convention variable names begin with a lowercase letter and class names begin  with an uppercase letter.
-If vaiable name consist of more than one word, such as isVisible, the words are joined together and each word after the first begin with an uppercase letter.
n/b Variable may have the same name as another variable whose declaration appear in a different scope.



Scope
------------
-A variable's scope  is the block of code within the variable is accessible and determines when the variable is created and destroyed.
-The location of the variable declaration within you program establish its scope and places it into one of the following  four caterogiries:
                       member variable
                       Local variable
                       Method parameter
                       Exception-handler parameter.
                       
-A member variable - is a member of a class or object.
                   - It can be declared anywhere in a class but not in a method.
                   -the member is available to all code in the member variable.
-Local variable - can be declared anywhere in a method or within a block of code in a method.
                -In countChars, count is a local variable.
                -the scope of count, that is, the code  that can access count, extends from the declaration of count to the end of the countChars method.
                -Local variable is accessible from its declaration to the end of the code block in which it was declared.
-Method parameter - formal arguments to methods and are used to pass values into the method.
                  -passes values into  methods through parameter. You can also pass values into constructor in the same manner.
                  -In countChar, in is a parameter  to the countChars method.
                  -the scope of a method parameter is the entire method for which it is a parameter.
                  -In countChars, the scope of in is the entire countChars method.
-Exception-handler parameter - are similar to method parameter but are argument to an exception handler rather than to a method or a constructor.
                             - the countChars  method does not have any exception handlers, so it doesn't have any exception-handler parameter.
                             
                             
                             Variabls initializations
                             -------------------------
-Local variable and member variable can be initialized with an assigment statement when they are declared.
-The data type of both sides of the assignment statement must match.
-The countChars method provides an initial value of zero for count when declaring it.
-Method parameter and exception-handler parameter cannot be initialized in this way;
 the value for a parameter is set by the caller.
 
 Final variables
 --------------------
 -You can declare any variable in any scope to be final, including parameter to method and constructors.
 -The value of a final variable cannot change after it had been initialized.
 -To declare final variable, use the final keyword in the variable declaration before the type
     final int number=0;
 -Above statement declares a final variable and initialize it, all at once.
 -subsequent attempt to assign a value to Number results in a compiler error.
 -You can define and initialize it later.
 -A final variable that has been declared but not yet initialized is called a blank final


Operators
------------
-The countChars methods uses several operators; =, !=, ++ 
-operators performs function to one or three operands.
-Operators that require one operand are called unary operator.
-For example, ++ is a unary operator that increment the value of its operand by 1.
-operators that require two operands are binary operators. For example = . it asigns  the value from its right-hand operand to its left-hand operand.
-Tertiary operators are those that require three  operands .
-Java has one tertiary operand "?: " which is a short-hand of if else statement.
-Uninary  operator can use either prefix or postfix notation.
-Prefix notation means that the operator  appear before its operand.
      operator op
-Postfix notation means that the operator appear after the operand.
     op operator
-All java's binary operator use infix notation, which means that the operator appear between its operands.
    op1 operator op2
-Also, the tertiary is infix , each component of the operator appears between its operands.
   expr ? op1 : op2
-In addition to performing the operation, an operator also return a value.
-The value and its type depends on the operator and the type of its operands.
-Java operators are caterogied into: 
              arithimetic
              relational and conditional 
              bitwise and logical 
              Assignement
              
Arithmentics
--------------
-Java support verious  arithmentics operators for all floating-point and integer numbers.
-this include: addition(+), subtraction(-), multiplication(*), division(/) and modulo().
-The java language extends the definition of the +  operator to include string concatenation.
-The countChar method uses + to cancatenate 'counted', the value of count and 'char'.
      System.out.println("count" + count + "char.")
-This operator automatically coerces the value to a string.
-There also two arithmetic operation ++, which increments its operand by 1 and --, which decrement its operand  by 1.
-the countChars method uses ++ to increment the count variable each time it reads a character from the input source with this statement.
-In the countChars method, suppose that the count is 3 before the following statement is executed:
                 count++;
-After the statement is executed, the value of the count is 4. No surprises there. However, the statement count++ evaluate to 3.
-The prefix version of ++ would also set count to 4. however, the statement ++ count does not evaluate to 3 like the postfix version ++ does.
-The both statements are useful when the value of the statement is used in the middle of a more complex computation, for flow control, or for something else.
                      do {
                       } while(count ++ < 4);
                       
- op++ increments op by 1; evaluate to value before incrementing.
-++op increment op by 1; evaluate to value after incrementing.

                       
      Relational and conditional operators
      ----------------------------------------
-A relational operator compares two values and determine the relationship between them.
-!= returns true if the two operands are unequal.
-The countChar method uses != to determine whether the value returned by in.read is not equal to -1.
-op1 > op2( op1 is greater than op2).
-op1 >= op2 (op1 is greater than or equal to op2).
-op1 < op2( op1 is less than to op2).
-op1 <= op2(op1 is less than or equal to op2).
-op1 == op2 (op1 is equal to op2).
-op1 != op2 ( op1 and op1 are not equal)
-op1 instanceof op2 (op1 and op2 are assignment compatible).
-Relational operators  often are used with the conditional operators to construct more complex decision-making expression.
-one such operator is &&, which performs the boolean and operation.
-You can use two different relational operator along with && to determine if both relationships are true.
-Determining if an array index is between two boundaries. Also determine if the index is both greater than 0 or less than 
 NUM_ENTRIES(Which is a previously defined constant value)
     0<index && index < NUM_ENTRIES.
-In some instance, the second operand to a conditional operator may not be evaluated.
     ((count > NUM_ENTRIES) && (in.read() != -1))
-If count is less than NUM_ENTRIES, the left-hand operand for && evaluates to false.
-the && operator returns true only if both operands are true.
-So in this situation, the returned value of && can be determined without evaluating the right -hand operand.
-In such a case, java does not evaluate the right-hand operand.
-Thus  in.read won't get to called  and a character will not be read from the stream.
-The operator & is similar to && if both of its operands are of boolean type.
   
   binary conditional operators
   -------------------------------
-op1 && op2(op1 and op2 are both true, condition evaluate op2.
-op1 || op2 (either op1 and op2 is true: conditionally evaluates op2)
-! op (op is false)
-op1 & op2(op1 and op2 are both true: always evaluates op1 and op2.
-op1 | op2(either op1 or op2 is true: always evaluate op1 and op2)
-Java sopport tertiary operator and is basically shorthand for an if-else statement.
             expression ? op1 : op2
-The ?: operator evaluates expression and return op1 if it's true and op2 if its false.


Bitwise and logical operator
-----------------------------
-A bitwise operator allows you to perform bit manipulation on data.
            op1 >> op2 (shifts bits of op1 right by distance op2)
            op1 << op2 (shift bits of op1 left by distance op2)
            op1 >>> op2 (shifts bits of op1 right by distance op2 (unsigned).
            op1 & op2 (perform the bitwise and)
            op1 | op2 (perform the bitwise or)
            op1 xor op2(perform the bitwise xor)
           bitwise complement op (perform the bitwise complement).
-the three shift operators simply shift the bits of the  left-hand operand over by  the number of position indicated by the 
 right-hand operand.
 -The shift occcurs in the direction indicated by the operator itself.
 -For example:
         The following statement shifts the bits of the integer 13 to the right by one position
              13 >> 1;
-The binary representation of the number 13 is 1101.
-The result of the  shift operation is 1101 shift to the right by one  position 110 or six in decimal notation.
-The bit farthest to the right falls off the end into the bit bucket.
-The | operator perform the inclusive or operation.
-inclusive or means that if either of the 2 bits are 1, then the result is 1.
-Exclusive or means that if the two operands bits are different, the result is 1, otherwise the result is 0.
-the complement operator,  inverts the value of each bit of the operand. if the operand bit is 1, the result is 0 and if the
 operand bit is 0, the result is 1.
 -bitwise manipulations are useful for managing sets of boolean flags.
 -On having several boolean flags in your program  that indicate the state of various components in your program - is it visible, is it draggable and so on.
 -Rather than defining seperate boolean variable to hold each flag, you can define a single variable, flags for all of them.
 -Each bit within flags represents the current state of one of the flags.
 -You can then use bit manipulation to set and get each flag.
 -First set the constant that indicate the various flags for your program.
 -Each flags should each be a different power of  2 to ensure that the 'on' bit doesn't overlap with another flag.
 -then define a variable flag, whose bits are set according to the current state of each flag.
 -The following code sample initializes flags to 0, thereby indicating that all flags are false(that is no bit are set).
     final int VISIBLE = 1;
     final int DRAGGABLE = 2;
     final int SELECTABLE = 4;
     final int EDITABLE = 8;
     
 -To set the visible flag when something became visible, use this statement:
       flags = flags | VISIBLE;
 -To test for visibility, you then write:
        if (flags & VISIBLE)
         ...
        
        
        
        ASSIGNMENT OPERATORS
        ---------------------
 -Basically, it is used to assign on value to another (=).
 -countChars method uses = to initialixe count with this statement:
            int count = 0;
 -Java also provides several shortcuts assignment operators that allow you to perform an arithmentic, logical, or bitwise and assignment operation. 
 -Suppose you want to add a number to a variable and assign the result back into the variable ie 
       i = i + 2;
 -You can shorten this using the shortcut operator;
      i += 2;
      op1 += op2 ( op1 = op1 + op2)
      op1 *= op2 (op1 = op1 * op2)
 
 
 
 EXPRESSIONs 
 --------------------
-Expression perform the work of java.
-Used to compute and assign values to variables and to help control the execution flow of a program.
-the job of an expression is twofold: perform the computation indicated  by the element of the expression and return some value that  is the result of the computation.
-Expression is series of variable, operators, and methods calls(constructed according to the syntax of the language) that evaluate to a single value.
-Expression in countChars:
           in.read() != 1
-It consist of two expression, 
         the first expression is a method call.
                       in.read()
-A method call expression evaluates to the return value of the method.
-Therefore the datatype  of a method call expression is the same as the data type of its return value.
-The  in.read method is declared to return an interger , so the expression in.read() evaluate to an integer.
-the != compares two operands for inequality.
-in.read() != -1 compares two inegers: the value returned by in.read() and -1.
-The value returned by != is either true or false depending on the outcome of the comparison.
-Java allows you to construct compound expression and statemnts from various smaller  expression as long as the data types required by both parths of the expression
 match.
 -you can direct the java compiler to evaluate an expression in a specified order by using balanced parentheses().
 -Operators with a higher precedence get evaluated first.
 
 
 Control flow statement
 --------------------------
 -The countChars methods uses a while statement to loop through  all of the characters of the input source and count them.
             import java.io.*;
             public class Count{
              public static void CountChars(Read in) throws IOException
             {
             int count = 0;
             while (in.read() != -1)
                  count++;
             System.out.println("count" + count + "chars.");
             }
             // main method
             }
            }//close the class
-A while statement perform some actions while a certain condition remain true.
-General syntax of while statement.
         while(expression)
              statement
-That is, while expression is true., do statement. in countChars, while the read method return a value that is not -1, the program increment count.
-Statement can be one statement,  or it can be statement block.
-A statement block is a series of legal java statement containined within the curly brackets.
         while(in.read() != -1){
           count++;
           System.out.printLn("Read a character.count = " + count);
           }
-prints the count each time a character is read.
-though goto is a reserved word, currently java does not support goto statement. Use branching statement instead.
-Statement such as the while statement is a control flow statement, that is it determine the order in which other statement are excuted.


  control flow statements
  -------------------------
  Type of statement            keyword
  -------------------         ---------------
  -Decision-making           -if-else, switch-case
  -loops                     -for, while, do-while
  -Exception                 - try-catch-finally, throw
  -Branching                 - break, continue, label:, return
  
  
  -The if-else statement
  -------------------------
  -Enable your program to selectively execute other statement based on some criteria.
  -For example, if your program print debugging information based on the value of some boolean variable named DEBUG.
  -If the DEBUG is set to true, then your program prints debugging information such as the value of a variable x. otherwise, your program proceed normally, 
           if (DEBUG)
           System.out.printLn("DEBUG: x= " +x);
  -Above execute if some condition is true.
  -General syntax of if statement,
             if(expression)
                statement
  -suppose you want to excute a different set of statement if  expression is false, you can use the else statement for that.
  -suppose you program need to perform different actions depending on whether the user click  OK or CANCEL in an alert window.
  -You program could do this using an if statement and an else statement.
         if (response == OK){
           //code to perform ok action
         }else{
         //code to perform cancel action
  -This particular use of the else statement is the catch -all form.
  -the else block is executed  if the if part is false.
  -Another form of the else statement, else if, execute a statement based on another expression.
  -A prgram that assigns grades based on the value of a test score.
  -A for a score of 90 and above, B for a score above 80 and so on.
               int testScore;
               Char grade;
               if(testScore >= 90 && testSCore < 100){
                 grade = 'A';
               }else if (testScore >= 80 && testSCore < 90){
               grade = 'B';
               }else if (testScore >= 70 && testSCore < 80){
               grade = 'C';
               }else if(testScore >= 40 && testSCore < 70{
               grade = 'D';
               }
               else{
               System.out.println("You have to retake')
 -An if statement can have any number of companion else if statement, but only one else.
 
 
 
 The Switch statement
 -----------------------
 -
  
      
  
           


                
                
                
                
                
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      



































 

 
























